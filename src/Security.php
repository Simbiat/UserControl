<?php
declare(strict_types=1);
namespace Simbiat\usercontrol;

class Security
{    
    #Attach common settings
    use \Simbiat\usercontrol\Common;
    
    #Argon version
    private $argonAlgo = PASSWORD_ARGON2ID;
    #Argon settings
    private array $argonSettings = [
        'memory_cost' => 1024,
        #Despite name, this is not time, but number of iterations
        'time_cost' => 2,
        'threads' => 2,
    ];
    
    public function __construct()
    {
        #Cache DB controller, if not done already
        if (self::$dbcontroller === NULL) {
            self::$dbcontroller = new \Simbiat\Database\Controller;
        }
    }
    
    #Function to validate password
    public function passValidate(int|string $id, string $password): bool
    {
        #Get password hash from DB
        
        #Validate password
        #password_verify
        
        #If password is valid, check if it needs rehashing
        #password_needs_rehash ( string $hash , mixed $algo , array $options = ? ) : bool
        
        #Rehash password
    }
    
    #Function to calculate optimal parameters for Argon2 hashing
    #Clarification for whoever reads this: while it is recommended to first allocate as much memory as possible and then increase the number of iterations, if this logic is applied to a high-load web-server it will become highly likely to get the memory exhaustion during concurent runs of the validation. Thus this automated function first calculates the number of iterations and then memory.
    #This does not necessarily mean reduction of security, but if you feel unsafe, adjust the setting file generated by this function to settings that work better for you. Keep in mind, that amount of memory is recommended to be a value of power of 2 (1024 is the minimum one).
    public function argonCalc(float $targettime = 1.0): array
    {
        #Calculate number of avialable threads
        $threads = $this->countCoures()*2;
        #Calculate iterrations
        $iterations = 0;
        do {
            $iterations++;
            $start = microtime(true);
            password_hash('rel@t!velyl0ngte$t5tr1ng', PASSWORD_ARGON2ID, ['threads' => $threads, 'time_cost' => $iterations]);
            $end = microtime(true);
        } while (($end - $start) < $targettime);
        #Calculate memory. We start from power = 9, because Argon supports minimum value of 1024 (power = 10)
        $power = 9;
        do {
            $power++;
            $memory = 2**$power;
            $start = microtime(true);
            password_hash('rel@t!velyl0ngte$t5tr1ng', PASSWORD_ARGON2ID, ['threads' => $threads, 'time_cost' => $iterations, 'memory_cost' => $memory]);
            $end = microtime(true);
        } while (($end - $start) < $targettime);
        #Write config file
        file_put_contents(__DIR__.'/argon.json', json_encode(['threads' => $threads, 'time_cost' => $iterations, 'memory_cost' => $memory], JSON_PRETTY_PRINT));
        return ['threads' => $threads, 'time_cost' => $iterations, 'memory_cost' => $memory];
    }
    
    #Helper function to get count of available cores
    private function countCoures(): int
    {
        if (function_exists('shell_exec') === true) {
            $cores = intval(shell_exec((PHP_OS_FAMILY === 'Windows' ? 'echo %NUMBER_OF_PROCESSORS%' : 'nproc')));
        } else {
            $cores = 1;
        }
        if ($cores < 1) {
            $cores = 1;
        }
        return $cores;
    }
}
?>